import numpy as npimport matplotlib.pyplot as pltimport glob import natsortfrom scipy.interpolate import UnivariateSplinefrom scipy.optimize import brentq# files = natsort.realsorted(glob.glob("data4/*"))def plot_binder():           for N in 8,16,32:        files = glob.glob(f"data4/*N{N}*")        print(files)        Ts = []        bs = []                for f in files:            data = np.load(f)            print(f) #use split to get N and T                        T = float(f.split("T")[1].split("N")[0])            N = int(f.split("N")[1].split(".npz")[0])            energy = data['energy']            mag = data['magnetisation']                        binder = 1-np.mean(mag**4)/3./np.mean(mag**2)**2            Ts.append(T)            bs.append(binder)                                        plt.axvline(x = 2.269, color = 'r', linestyle = '-')          plt.scatter(Ts,bs)    plt.show()    plot_binder()# def stat_plot_sizes(stat_func, stat_name, ):#     """#     stat_func: a function like kurtosis, np.mean, etc.#     stat_name: label to show on the y-axis#     """    #     # --- Plot Energy statistic vs Temperature ---    #     plt.figure(figsize=(8, 5))    #     for a in range(3):#         # Compute the statistic for each temperature#         stat_values_E = [stat_func(energy_samples) for energy_samples in E_final[a]]        #         # Plot#         plt.plot(T, stat_values_E, marker='o', label=f'N={n[a]}')    #     plt.xlabel("Temperature (T)", fontsize=14)#     plt.ylabel(f"{stat_name} of Energy", fontsize=14)#     plt.title(f"{stat_name} of Energy vs Temperature", fontsize=16)#     plt.legend()#     plt.grid(True)#     plt.show()    #     # --- Plot Magnetization statistic vs Temperature ---#     plt.figure(figsize=(8, 5))#     for a in range(3):#         # Compute the statistic for each temperature#         stat_values_M = [stat_func(mag_samples) for mag_samples in M_final[a]]        #         # Plot#         plt.plot(T, stat_values_M, marker='s', label=f'N={n[a]}')    #     plt.xlabel("Temperature (T)", fontsize=14)#     plt.ylabel(f"{stat_name} of Magnetization", fontsize=14)#     plt.title(f"{stat_name} of Magnetization vs Temperature", fontsize=16)#     plt.legend()#     plt.grid(True)#     plt.show()    # def plot_iterations_for_temperature(file_name, property_name):#     """#     Plots either Magnetization or Energy vs iteration for all lattice sizes#     at a chosen temperature index.    #     Parameters:#     -----------#     M_final      : list of lists of lists#                    M_final[i][j] is the magnetization time-series for #                    lattice size n_list[i] at T[j].#     E_final      : list of lists of lists#                    E_final[i][j] is the energy time-series for #                    lattice size n_list[i] at T[j].#     n_list       : list of lattice sizes used (e.g. [8, 16, 32])#     T            : array or list of temperatures#     temp_index   : int#                    Index in T for which we want to plot property vs iteration#     property_name: str, optional#                    'Magnetization' or 'Energy' (default is 'Magnetization')#     """#     # Create figure#     plt.figure(figsize=(8, 5))        #     data = np.load(file_name)#     prop = data[property_name]     #     ylabel = property_name#     # Plot data vs iteration#     plt.plot(range(len(prop)), prop, label=f'N = {n[size_index]}')    #     # Labeling#     plt.xlabel("Iteration", fontsize=12)#     plt.ylabel(ylabel, fontsize=12)#     plt.title(f"{ylabel} vs. Iteration at T = {T[temp_index]:.2f}", fontsize=14)#     plt.legend()#     plt.grid(True)#     plt.show()       #plot_iterations_for_temperature(Data2, "Magnetisation")